# Original written by Viesturs Zarins
# Modified by Justin F. Hallett
# Modified more by Jared Wellman

[gcode_macro homing_override_config]
variable_sensorless_x: 
variable_sensorless_y: 
variable_homing_rebound_y: 20
variable_stepper_driver: "tmc2209"
variable_homing_current: 0.49
gcode: 


[homing_override]
axes: xyz
gcode:
  INITIALIZE_TOOLCHANGER
  {% if printer.probe.last_query %}
    RESPOND TYPE=error MSG='Z Probe triggered, cannot home.'
  {% else %}
    SET_GCODE_OFFSET X=0.0 Y=0.0 Z=0.0
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

    {% set config = printer["gcode_macro homing_override_config"] %}


    G90 ; absolute mode
    {% if 'z' not in printer.toolhead.homed_axes %}
      SET_KINEMATIC_POSITION Z=0
      G0 Z10 F1000
    {% elif printer.toolhead.position[2]|float < 10 %}
      G0 Z10 F1000
    {% endif %}

    {% if home_all or 'Y' in params or 'X' in params %}
      {% if config.sensorless_y %}
        _SENSORLESS_HOME AXIS=Y
      {% else %}
        G28 Y
      {% endif %}
      G0 Y{ max_y - config.homing_rebound_y } F6000
    {% endif %}

    {% if home_all or 'X' in params %}
      {% if config.sensorless_x %}
        _SENSORLESS_HOME AXIS=X
      {% else %}
        G28 X
      {% endif %}
      G0 X{ max_x - 10} F6000
    {% endif %}

    {% if home_all or 'Z' in params %}
      {% set random_x = (range(-50, 50) | random) / 10 %}
      {% set random_y = (range(-50, 50) | random) / 10 %}

      G90 ; absolute mode
      G0 X{( max_x / 2 ) + random_x} Y{( max_y / 2 ) + random_y} F12000
      G28 Z
      _ADJUST_Z_HOME_FOR_TOOL_OFFSET
    {% endif %}
    _APPLY_ACTIVE_TOOL_GCODE_OFFSETS
    M400
  {% endif %}

[gcode_macro _SENSORLESS_HOME]
gcode:
  {% set axis = params.AXIS|default('X')|string %}

  # Always use consistent run_current on A/B steppers during sensorless homing
  {% set RUN_CURRENT_X = printer.configfile.settings[printer.toolchanger.stepper_driver ~ ' stepper_x'].run_current|float %}
  {% set RUN_CURRENT_Y = printer.configfile.settings[printer.toolchanger.stepper_driver ~ ' stepper_y'].run_current|float %}
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer.toolchanger.homing_current}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer.toolchanger.homing_current}
  {% if printer.toolchanger.stepper_driver ~ 'stepper_x1' in printer.configfile.settings %}
    {% set RUN_CURRENT_X1 = printer.configfile.settings[printer.toolchanger.stepper_driver ~ ' stepper_x1'].run_current|float %}
    SET_TMC_CURRENT STEPPER=stepper_x1 CURRENT=0.1
  {% endif %}
  {% if printer.toolchanger.stepper_driver ~ 'stepper_y1' in printer.configfile.settings %}
    {% set RUN_CURRENT_Y1 = printer.configfile.settings[printer.toolchanger.stepper_driver ~ ' stepper_y1'].run_current|float %}
    SET_TMC_CURRENT STEPPER=stepper_y1 CURRENT=0.1
  {% endif %}

  # Home
  G28 {axis|upper}
    
  # Wait just a secondâ€¦ (give StallGuard registers time to clear)
  G4 P1000
  # Set current during print
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
  {% if printer.toolchanger.stepper_driver ~ 'stepper_x1' in printer.configfile.settings %}
    SET_TMC_CURRENT STEPPER=stepper_x1 CURRENT={RUN_CURRENT_X1}
  {% endif %}
  {% if printer.toolchanger.stepper_driver ~ 'stepper_y1' in printer.configfile.settings %}
    SET_TMC_CURRENT STEPPER=stepper_y1 CURRENT={RUN_CURRENT_Y1}
  {% endif %}


; Depending on the selected tool at the time of homing, the physical Z endstop position is offset.
; This corrects for that using current tool offset.
[gcode_macro _APPLY_Z_HOME_FOR_TOOL_OFFSET]
variable_default_raise: 10.0
variable_tool: ''
variable_tool_z_offset: 0
variable_probe_z_offset: 0
variable_probe_compensate: 1
variable_applied: 0
variable_debug_output: 0
gcode:
  {% set raise = params.RAISE|default(default_raise)|float %}
  {% set probe_compensation = 0 %}
  {% if probe_compensate %}
    {% set probe_compensation = probe_z_offset %}
  {% endif %}

  G90 ; absolute mode
  G0 Z{raise} F1000
  {% if tool in printer %}
    {% if debug_output %}
      RESPOND TYPE=echo MSG='Current Adjustment: {applied}'
      RESPOND TYPE=echo MSG='Tool: {tool}'
      RESPOND TYPE=echo MSG='Probe Offset: {probe_z_offset}'
      RESPOND TYPE=echo MSG='Probe Compensation: {probe_compensation}'
      RESPOND TYPE=echo MSG='Tool Offset: {tool_z_offset}'
    {% endif %}
    {% if params.MESH is defined %}
      _REMOVE_Z_HOME_FOR_TOOL_OFFSET
      #{% set applied = probe_compensation %}
      {% if debug_output %}
        RESPOND TYPE=echo MSG='Bed Adjustment: {raise} = {raise + applied}'
      {% endif %}
      SET_KINEMATIC_POSITION Z={raise + applied}
    {% else %}
      _REMOVE_Z_HOME_FOR_TOOL_OFFSET
      {% set applied = probe_compensation + tool_z_offset %}
      {% if debug_output %}
        RESPOND TYPE=echo MSG='Bed Adjustment: {raise} = {raise + applied}'
      {% endif %}
      SET_KINEMATIC_POSITION Z={raise + applied}
    {% endif %} 
    G0 Z{raise} F1000
  {% endif %}


[gcode_macro _REMOVE_Z_HOME_FOR_TOOL_OFFSET]
gcode:
  {% set raise = printer["gcode_macro _APPLY_Z_HOME_FOR_TOOL_OFFSET"].raise|default(10)|float %}
  {% set applied = printer["gcode_macro _APPLY_Z_HOME_FOR_TOOL_OFFSET"].applied|default(0)|float %}
  {% if applied != 0 %}
    RESPOND TYPE=echo MSG='Bed Adjustment: {raise} = {raise - applied}'
    SET_KINEMATIC_POSITION Z={raise - applied}
    SET_GCODE_VARIABLE MACRO=_APPLY_Z_HOME_FOR_TOOL_OFFSET VARIABLE=applied VALUE=0
    G0 Z{raise} F1000
  {% endif %}


[gcode_macro _APPLY_ACTIVE_TOOL_GCODE_OFFSETS]
gcode:
  ; Apply gcode offsets
  {% set tool = printer.toolchanger.tool %}
  {% if tool %}
    {% set tool_x_offset = printer[tool].gcode_x_offset|default(0)|float %}
    {% set tool_y_offset = printer[tool].gcode_y_offset|default(0)|float %}
    {% set tool_z_offset = printer[tool].gcode_z_offset|default(0)|float %}
    SET_GCODE_OFFSET X={tool_x_offset} Y={tool_y_offset} Z={tool_z_offset}
  {% endif %}


# [gcode_macro BED_MESH_CALIBRATE]
# rename_existing: TOOL_BED_MESH_CALIBRATE
# gcode:
#   _APPLY_Z_HOME_FOR_TOOL_OFFSET MESH=1
#   TOOL_BED_MESH_CALIBRATE {rawparams}
#   _APPLY_Z_HOME_FOR_TOOL_OFFSET

[gcode_macro _ADJUST_Z_HOME_FOR_TOOL_OFFSET]
gcode:
      G90 ; absolute mode
      G0 Z10 F1000
      {% set tool = printer.toolchanger.tool %}
      {% if tool %}
         {% set tool_z_offset = printer[tool].gcode_z_offset %}
         {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset %}
         SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float+probe_z_offset|float}
      {% endif %}

  