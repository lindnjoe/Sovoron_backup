# If you are using CAN, define the board info. Make sure to change pin definitions also!
[mcu EBBT0]
#serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0D0039000E50425539393020-if00  #/dev/serial/by-id/usb-Klipper_stm32g0b1xx_260043001150425539393020-if00
canbus_uuid=17551dcfa895
#restart_method: command
# Extruder Example, change as needed. If this is T1, then should be something like extruder1

[adxl345 T0]
cs_pin: EBBT0: PB12
spi_software_sclk_pin: EBBT0: PB10
spi_software_mosi_pin: EBBT0: PB11
spi_software_miso_pin: EBBT0: PB2
axes_map: z,-y,x

#[temperature_sensor EBB_NTC]
#sensor_type: Generic 3950
#sensor_pin: EBBT0: PA2

#[filament_switch_sensor filament_sensor]
#pause_on_runout: True
#event_delay: 3.0
#pause_delay: 0.5
#switch_pin: PB6

#[delayed_gcode DISABLEFILAMENTSENSOR]
#initial_duration: 1
#gcode:
#    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0




[tmc2209 extruder]
uart_pin: EBBT0: PA15
interpolate: True
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0 # Silence threshold (if silence is not required, please change the value to 0)

[extruder]
step_pin: EBBT0:PD0
dir_pin: EBBT0:PD1
enable_pin: !EBBT0:PD2
microsteps: 64
full_steps_per_rotation: 200 # Single-turn pulse number (200 is 1.8 degrees, 400 is 0.9 degrees)
rotation_distance: 4.637 # Driving pulley circumference mm
## Calibration step value: rotation_distance = <old rotation_distance> * <actual extrusion length> / <requested extrusion length>
#gear_ratio: 50:10 # Reduction ratio (Galileo gear ratio 7.5:1 and comment out this line; BMG is 50:17, output shaft in front, input shaft in rear)
nozzle_diameter: 0.400 # Nozzle diameter
filament_diameter: 1.750 # filament diameter
heater_pin: EBBT0: PB13 # Extrusion head heating rod control pin setting (e0)
sensor_type: Generic 3950 #my_thermistor_e #MAX31865 # Sensor model
#pullup_resistor: 11500
#spi_bus: spi1
#rtd_nominal_r: 100
#rtd_reference_r: 430
#rtd_num_of_wires: 2
sensor_pin: EBBT0:PA3 # Extrusion head sensor Pin (T_E0)
max_power: 1.0 # Heating rod PWM maximum output power
min_temp: -235 # Minimum temperature of extruder
max_temp: 500 # Maximum temperature of extruder
min_extrude_temp: 170 # The minimum extrusion temperature of the heating rod (the extruder can only perform extrusion when it reaches this temperature)
pressure_advance: 0.032 # Extruder pressure advance parameter
pressure_advance_smooth_time:0.040 # Smooth advancement time - the default value is 0.040
#Nozzle temperature PID calibration command: "PID_CALIBRATE HEATER=extruder TARGET=245
control=pid
pid_Kp: 31.792
pid_Ki: 10.461
pid_Kd: 33.131
max_extrude_only_distance: 1400.0
max_extrude_only_velocity: 75.0
max_extrude_only_accel: 1500
max_extrude_cross_section: 8


# Change tool number if needed here
[fan_generic PartFan_T0]
pin: EBBT0:PA0

# Change tool number if needed here
[heater_fan T0_hotend_fan]
pin: EBBT0:PA1
# Change extruder tool number if needed here
heater: extruder
heater_temp: 50.0
kick_start_time: 0.5

#Change tool number if needed in the next line, as well ast the last line
# [gcode_macro T0]
# variable_color: ""
# gcode:
#   SELECT_TOOL T=0

#change the tool numbers to the tool you are configuring, ie T0, T1, etc

# [gcode_macro EBBT0]
# variable_active: 0
# variable_filament_consumed: 0
# gcode:
#   {% if printer.toolhead.homed_axes != "xyz" %}
#     {action_respond_info("Please home XYZ first")}
#   {% else %}
#     _TOOLCHANGER_DISABLE_FILAMENT_SENSORS
#     SET_GCODE_VARIABLE MACRO=EBBT0 VARIABLE=active VALUE=1
#     ACTIVATE_EXTRUDER EXTRUDER=extruder
#     SELECT_TOOL T=0
#   {% endif %}

[gcode_macro T0]
variable_color: ""
gcode:
  SELECT_TOOL T=0
# variable_realtool: "EBBT0"
# variable_backuptool: ""
# variable_color: ""
# gcode:
#   {% set consumed = printer["gcode_macro " ~ realtool].filament_consumed|int %}
#   {% if consumed and backuptool %}
#     { action_respond_info(realtool ~ " empty loading backup") }
#     {backuptool}
#   {% else %}
#     { action_respond_info("Switching to " ~ realtool) }
#     {realtool}
#   {% endif %}


[neopixel led]
pin: EBBT0:PD3
chain_count: 3
color_order: GRBW
initial_RED: 1.0
initial_GREEN: 0.0
initial_BLUE: 1.0
initial_WHITE: 0.0

[tool_probe_endstop]
crash_mintime: 0.7 # seconds to wait before announcing a crash, if the probe stops 
  #triggering before this, no crash is reported. 
crash_gcode:
    RESPOND TYPE=error MSG='Tool not detected, expected {printer.toolchanger.tool_number}. Pausing the print.' 
    M84
    TURN_OFF_HEATERS

# Change tool number if needed

[gcode_button T0_filament_sense]
pin: !EBBT0:PB3
press_gcode: # sensor released  -runnout detected!
  runnout_init
release_gcode: #gcode macro for filament auto-load, sensor pressed
  filament_load_init

[gcode_button T0_filament_unload]
pin: !EBBT0:PB4
release_gcode:  # filament unload procedure   
  filament_unload_init
press_gcode: # do not add any macro call here
