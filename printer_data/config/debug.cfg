[gcode_macro MEGA_DUMP]
description: Up to 3-level BFS. If container path matches, show (dict) and skip inside. S=keyword°others.
gcode:
    {% set raw_s = params.S|default("")|string %}
    {% set search_lc = raw_s|lower %}
    {% set terms = search_lc.split("°") %}
    {% set color_path = "rgb(128,128,128)" %}
    {% set color_key  = "rgb(0,150,255)" %}
    {% set color_val  = "rgb(255,200,50)" %}
    {% set color_typ  = "rgb(180,180,180)" %}
    {% set color_match= "rgb(255,0,100)" %}
    #{% set nl = '\u0026\u0023\u0031\u0030\u003b' %}
    {% set nl = '<br>' %}

    {% set ns = namespace(lines=[], total=0, stack=[], done=False, doneAtLine="None", val="") %}

    {% for top_key in printer %}
        {% set item = [top_key|string, printer[top_key], 1] %}
        {% set ns.stack = ns.stack + [ item ] %}
    {% endfor %}

    {% for i in range(99999) %}
        {% if ns.stack|length == 0 %}
            {% set ns.done = 1 %}
        {% else %}
            {% set popped = ns.stack[ ns.stack|length -1 ] %}
            {% set ns.stack = ns.stack[:ns.stack|length -1] %}
            {% set cur_path = popped[0] %}
            {% set cur_obj  = popped[1] %}
            {% set depth    = popped[2] %}
            {% set typ_str  = cur_obj.__class__.__name__|string %}

            {% set val_str = "" %}
            {% if typ_str not in ["dict", "list", "tuple", "set"] %}
                {% set val_str = cur_obj|string %}
            {% endif %}

            {% set combined = cur_path|lower %}
            {% if val_str %}
                {% set combined = combined ~ " " ~ val_str|lower ~ typ_str|lower %}
            {% endif %}

            {% set match_ns = namespace(keep=true) %}
            {% for t in terms %}
                {% if t|length > 0 and not (t in combined) %}
                    {% set match_ns.keep = false %}
                {% endif %}
            {% endfor %}

            {% if match_ns.keep %}
                {% set ns.total = ns.total + 1 %}
                {% set ns.final_path = cur_path %}
                {% set ns.final_val  = val_str|replace('"', '&quot;')|replace("'", '&apos;')|replace("<", "&lt;")|replace(">", "&gt;") %}
                {% set ns.final_typ  = "(" ~ typ_str ~ ")" %}
                {% set segments = cur_path.split(".") %}
                {% set ns.final_key = segments[segments|length -1] %}

                # |replace('"', '&quot;')|replace("'", '&apos;')|replace("<", "&lt;")|replace(">", "&gt;")

                {% set hover_path = cur_path|replace('"', '&quot;')|replace("'", '&apos;')|replace("<", "&lt;")|replace(">", "&gt;") %}
                {% set hover = "printer." ~ hover_path %}

                #{% for sub in terms %}
                #    {% if sub|length > 0 %}
                #        {% set ns.final_path = ns.final_path|replace(sub, "<span style='color:" ~ color_match ~ "'>" ~ sub ~ "</span>") %}
                #        {% set ns.final_key  = ns.final_key|replace(sub, "<span style='color:" ~ color_match ~ "'>" ~ sub ~ "</span>") %}
                #        {% set ns.final_val  = ns.final_val|replace(sub, "<span style='color:" ~ color_match ~ "'>" ~ sub ~ "</span>") %}
                #        {% set ns.final_typ  = ns.final_typ|replace(sub, "<span style='color:" ~ color_match ~ "'>" ~ sub ~ "</span>") %}
                #    {% endif %}
                #{% endfor %}



                # ------------------------------------------------------------------ #
                #  Two-pass highlighter: avoids touching characters that already
                #  live inside earlier span tags.
                #  - terms  - list split from the user’s S=… parameter
                #  - color_match  – your highlight RGB (already defined)
                #  - ns.final_path / key / val / typ  – the strings we want to colour
                # ------------------------------------------------------------------ #}

                {% set mask = namespace(
                    path = ns.final_path,
                    key  = ns.final_key,
                    val  = ns.final_val,
                    typ  = ns.final_typ,
                    map  = {}
                ) %}

                # ---------- PASS 1 : drop placeholders ---------- #}
                {% for t in terms %}
                {% if t|length > 0 %}
                    {% set token = "§" ~ loop.index|string ~ "§" %}
                    {% set _ = mask.map.update({token: t}) %}
                    {% set mask.path = mask.path|replace(t, token) %}
                    {% set mask.key  = mask.key |replace(t, token) %}
                    {% set mask.val  = mask.val |replace(t, token) %}
                    {% set mask.typ  = mask.typ |replace(t, token) %}
                {% endif %}
                {% endfor %}

                # ---------- PASS 2 : expand placeholders ---------- #}
                {% for token, word in mask.map.items() %}
                {% set span = "<span style='color:" ~ color_match ~ "'>" ~ word ~ "</span>" %}
                {% set mask.path = mask.path|replace(token, span) %}
                {% set mask.key  = mask.key |replace(token, span) %}
                {% set mask.val  = mask.val |replace(token, span) %}
                {% set mask.typ  = mask.typ |replace(token, span) %}
                {% endfor %}

                {% set ns.final_path = mask.path %}
                {% set ns.final_key  = mask.key  %}
                {% set ns.final_val  = mask.val  %}
                {% set ns.final_typ  = mask.typ  %}



                {% if typ_str in ["dict", "list", "tuple", "set"] and cur_obj|length > 0 %}
                    {% set summary = "<summary><span style='color:" ~ color_path ~ "'>" ~ ns.final_path ~ "</span> {<span style='color:" ~ color_val ~ "'>(" ~ typ_str ~ ")</span>}</summary>" %}
                    {% set children = [] %}
                    {% set show_keys = cur_obj.keys()|list if typ_str == "dict" else range(cur_obj|length) %}
                    {% for k in show_keys[:10] %}
                        {% set val_type = cur_obj[k].__class__.__name__ %}
                        {% if val_type not in ["dict", "list", "tuple", "set"] %}
                            {% set val_str = cur_obj[k]|string %}
                            {% if val_str|length > 50 %}
                                {% set val_str = val_str[:47] ~ "..." %}
                            {% endif %}
                            {% set child_line = "<div style='margin-left:1em'><span style='color:" ~ color_key ~ "'>" ~ k|string ~ ":</span> <span style='color:" ~ color_val ~ "'>" ~ val_str|replace('"', '&quot;')|replace("'", '&apos;')|replace("<", "&lt;")|replace(">", "&gt;") ~ "</span> <span style='color:" ~ color_typ ~ "'>(" ~ val_type ~ ")</span></div>" %}
                            {% set _ = children.append(child_line) %}
                        {% endif %}
                    {% endfor %}
                    {% set html = "<span style='display:inline-block'><details title='" ~ hover ~ "'>" ~ summary ~ children|join() ~ "</details></span>" %} # children|join(nl)
                    {% set ns.lines = ns.lines + [html] %}
                {% else %}
                    {% set line = "<span title='" ~ hover ~ "'>" ~
                        "<span style='color:" ~ color_path ~ "'>" ~ ns.final_path ~ "</span> {" ~
                        "<span style='color:" ~ color_key  ~ "'>" ~ ns.final_key ~ "</span>: " ~
                        "<span style='color:" ~ color_val  ~ "'>" ~ ns.final_val ~ "</span> " ~
                        "<span style='color:" ~ color_typ  ~ "'>" ~ ns.final_typ ~ "</span>}" ~
                        "</span>" %}
                    {% set ns.lines = ns.lines + [line] %}
                {% endif %}

            {% elif typ_str == "dict" and depth < 3 %}
                {% for child_key in cur_obj %}
                    {% set next = cur_path ~ "." ~ child_key|string %}
                    {% set entry = [next, cur_obj[child_key], depth + 1] %}
                    {% set ns.stack = ns.stack + [ entry ] %}
                {% endfor %}
            {% elif typ_str in ["list", "tuple", "set"] and depth < 3 %}
                {% set idx = 0 %}
                {% for val in cur_obj %}
                    {% set next = cur_path ~ "[" ~ idx|string ~ "]" %}
                    {% set entry = [next, val, depth + 1] %}
                    {% set ns.stack = ns.stack + [ entry ] %}
                    {% set idx = idx + 1 %}
                {% endfor %}
            {% endif %}
            {% if ns.done|default(false) and ns.doneAtLine == "None" %}
                {% set ns.doneAtLine=loop.index|string %}
                RESPOND MSG="{loop.index|string}"
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if ns.lines|length == 0 %}
        {% set safe = raw_s|replace("'", "&apos;") %}
        RESPOND MSG="No matches found for '{safe}'"
    {% else %}
        {% set msg = "Found " ~ ns.lines|length|string ~ " matches for '" ~ raw_s|replace("'", "&apos;") ~ "':" ~ nl ~ (ns.lines|join(nl))|replace('\n','') | replace('\r','') %}
        RESPOND MSG="{msg}"
    {% endif %}


[gcode_macro DUMP_VARIABLES]
description: Dump all values but can filter with NAME. e.g. DUMP_VARIABLES NAME=gcode_move. It can also filter by value VALUE
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

[gcode_macro GET_VARIABLE]
description: Dump the value of an object inside printer object. Use dot-notation, e.g. GET_VARIABLE NAME=gcode_move.gcode_position
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}